from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired, Length
from flask_sqlalchemy import SQLAlchemy

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.platypus import Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime, timedelta

# —Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—ñ–ª–∫—É —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º
import asyncio
from telegram import Bot
from telegram.error import TelegramError

# —Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—É–µ–º —Ç–æ–∫–µ–Ω
from cryptography.fernet import Fernet
from dotenv import load_dotenv

import os
import glob
import asyncio

load_dotenv()
key = os.getenv("SECRET_KEY").encode()
fernet = Fernet(key)

encrypted_token = b"gAAAAABnr2Ggvg1nQmZ2TtUD0QbXyzxsN6yLn65LyBarmW4yBlyh0oRp2RysG0QSiRdzbrWewtWBJE9QH2EKfzps6s4CpRXGaDvDalGwDeEPFl4DCBt7iwkdfS6MoPEoYSbBaZZ4Iyi5"
API_TOKEN = fernet.decrypt(encrypted_token).decode()

# Telegram IDs
YOUR_ID = 6250534524 #'YOUR_TELEGRAM_ID'
BROTHER_ID = 6404929561

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)

async def send_pdf_to_telegram(pdf_filename):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. üöÄ\n –ó–∞—è–≤–∫–∞ –æ—Ç {session['full_name']} --> {session['phone']} "
        await bot.send_message(chat_id=YOUR_ID, text=text)
        await bot.send_message(chat_id=BROTHER_ID, text=text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await bot.send_document(chat_id=YOUR_ID, document=open(pdf_filename, 'rb'))
        await bot.send_document(chat_id=BROTHER_ID, document=open(pdf_filename, 'rb'))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—É–º–º—É {session['total_sum']} –µ–≤—Ä–æ!!!"
        await bot.send_message(chat_id=YOUR_ID, text=text)
        await bot.send_message(chat_id=BROTHER_ID, text=text)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(pdf_filename)
        print(f'–§–∞–π–ª {pdf_filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.')
    except TelegramError as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}')
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç Arial
# –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É Arial.ttf –Ω–∞ —Ç–≤–æ—ë–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
arial_font_path = "Arial.ttf"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É Arial.ttf
pdfmetrics.registerFont(TTFont('Arial', arial_font_path))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
current_directory = os.getcwd()
print("PDF –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:", current_directory)

def create_pdf(filename, phone, full_name, date_registered):
    pdf = canvas.Canvas(filename, pagesize=A4)
    width, height = A4

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.setFont("Arial", 14)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç Arial
    pdf.drawString(50, height - 50, f"–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ –æ—Ç {date_registered}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    items = Item.query.all()
    data = [["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–≤–µ—Ç", "–¶–µ–Ω–∞", "–ö–æ–ª-–≤–æ", "–°—É–º–º–∞"]]
    total_sum=0

    for item in items:
        total_price = round(item.price * item.quantity,2) if item.price and item.quantity else 0
        total_sum+=total_price
        data.append([item.id, item.title, item.color_t, item.price, item.quantity, total_price])

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = Table(data)
    table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), 'Arial'),  # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç Arial –∫–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))

    # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ PDF
    table.wrapOn(pdf, width, height)
    table.drawOn(pdf, 50, height - 20*len(items)-150)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    pdf.setFont("Arial", 12)
    pdf.drawString(50, height - 70, f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤ –ï–í–†–û: {round(total_sum,2)}")
    pdf.drawString(50, height - 90, f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_registered}")
    pdf.drawString(300, height - 70, f"–§–ò–û: {full_name}")
    pdf.drawString(300, height - 90, f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    session['total_sum']=round(total_sum,2)
    pdf.save()

app = Flask(__name__)
@app.context_processor
def inject_user():
    return {
        'registered': session.get('registered', False),
        'user_data': session.get('user_data', {'phone': '', 'full_name': ''})
    }

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///shops.db'  # –£–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)
db = SQLAlchemy(app)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

app.config['SECRET_KEY'] = 'mama_mama_1975'

# –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationForm(FlaskForm):
    phone = StringField('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', validators=[DataRequired(), Length(min=10, max=13)])
    full_name = StringField('–ü–∞—Ä–æ–ª—å (–§–Ü–û)', validators=[DataRequired()])
    submit = SubmitField('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è')
    is_registered = False  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ—Ä–º—ã

@app.route('/new_register')
def new_register():
    session.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç session
    return redirect(url_for('register'))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –±–∞–∑—ã
@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()

    if request.method == 'POST':
        phone = request.form['phone']
        full_name = request.form['full_name']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session
        session['user_data'] = {'phone': phone, 'full_name': full_name}
        session['phone'] = phone
        session['full_name'] = full_name
        session['registered'] = True

        flash('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session!')
        return redirect(url_for('show_invoice'))  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è

    return render_template('register.html',form=form)

products = [
    {"title": "–ñ–æ–ª–æ–±", "price": 3.5},
    {"title": "–ö—Ä—é—á–æ–∫", "price": 1.2},
    {"title": "–í–æ—Ä–æ–Ω–∫–∞", "price": 6},
    {"title": "–ó–∞–≥–ª—É—à–∫–∞", "price": 3},
    {"title": "–ö—É—Ç 90", "price": 6},
    {"title": "–ö—É—Ç —Å–ø–µ—Ü", "price": 8},
    {"title": "–ö–æ–ª—ñ–Ω–æ", "price": 6},
    {"title": "–¢—Ä—É–±–∞", "price": 5},
    {"title": "–•–æ–º—É—Ç", "price": 3},
    {"title": "–°–Ω—ñ–≥–æ –¢_–ß", "price": 0.45},
    {"title": "–®—É—Ä—É–ø –ü–∞–∫", "price": 10},
    {"title": "–õ–µ–Ω—Ç–∞ –ü–¥", "price": 8},
    {"title": "–õ–µ–Ω—Ç–∞ –ë—Ç", "price": 14},
    {"title": "–ú–µ–º–±—Ä–∞–Ω–∞", "price": 31},
]

colors_id = ["8019", "8017", "XXXX", "3005", "6020", "8004", "9005", "7024", "7016", "AlZn", "Zn"]

class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(20), nullable=False)
    color_t = db.Column(db.Integer, nullable=True)
    price = db.Column(db.Float, nullable=True)
    quantity = db.Column(db.Integer, nullable=True)

    isActive = db.Column(db.String(100), default="[]")  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è JSON-—Å–ø–∏—Å–æ–∫ [phone, full_name, date]

    def __repr__(self):
         return (
            f"<Item(\n"
            f"  id={self.id},\n"
            f"  title='{self.title}',\n"
            f"  color_t={self.color_t},\n"
            f"  price={self.price},\n"
            f"  quantity={self.quantity},\n"
            f"  isActive={self.isActive}\n"
            f")>"
        )


@app.route('/end_index', methods=['POST'])
def end_index():
    phone = session.get('phone', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    full_name = session.get('full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    file_pdf = datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S') + ".pdf"
    formatted_time = (datetime.utcnow() + timedelta(hours=2)).strftime('%Y-%m-%d %H:%M:%S')

    create_pdf(file_pdf, phone, full_name, formatted_time)
    asyncio.run(send_pdf_to_telegram(file_pdf))

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
    for pdf in glob.glob("*.pdf"):
        os.remove(pdf)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ PDF
    session.clear()  # –û—á–∏—â–∞–µ–º session
    db.session.query(Item).delete()  # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.session.commit()

    flash(f'PDF {file_pdf} –≤—ñ–¥—Ä–∞–≤–ª–µ–Ω–æ  —Ç–∞ session.clear().delete()')
    return render_template('end_index.html')

@app.route('/')   #–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def index():
    return render_template('index.html')

@app.route('/about')   # –ü—Ä–æ –Ω–∞—Å
def about():
    return render_template('about.html')

@app.route('/gallery')   #  –ì–∞–ª–ª–µ–æ–µ—è
def index_gallery():
    base_path = "static/imgs/gallery"
    categories = ["dah", "detal", "parkan"]
    images = {category: sorted(os.listdir(os.path.join(base_path, category)))
              for category in categories if os.path.exists(os.path.join(base_path, category))}
    return render_template('gallery.html', images=images)

@app.route('/posts')   #–ó–∞—è–≤–∫–∞ - –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–∞–∑—ã–î–∞–Ω–Ω—ã—Ö
def posts():
    articles = Item.query.all()
    return render_template('posts.html', articles=articles)


@app.route('/invoice')   #   –†–∞—Ö—É–Ω–æ–∫
def show_invoice():
    items = Item.query.all()
    total_sum = sum(round(item.price * item.quantity, 2) for item in items)
    return render_template('invoice.html', items=items, total_sum=total_sum)

@app.route('/posts/<int:id>/del')   #   –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ë–î
def post_detail(id):
    article = Item.query.get_or_404(id)
    try:
        db.session.delete(article)
        db.session.commit()
        return redirect('/posts')
    except:
        return "–ü—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞"

@app.route('/posts/<int:id>')    #  –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î
def post_delete(id):
    article = Item.query.get(id)
    return render_template('post_detail.html', article=article)

@app.route('/posts/<int:id>/update', methods=['POST','GET'])   # –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
def post_update(id):
    article = Item.query.get(id)
    if request.method == "POST":
        article.title = request.form['title']
        article.color_t = request.form['color_t']
        article.price = request.form['price']
        article.quantity = request.form['quantity']

        try:
            db.session.commit() # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            return redirect('/posts') # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        except:
            return "–ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç—É–≤–∞–Ω–Ω—ñ —ç–ª–µ–º–µ–Ω—Ç–∞ —É –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö - –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞"
    else:
        return render_template('post_update.html',article=article)



@app.route('/create', methods=['POST','GET'])    #   –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
def create():

    if request.method == "POST":
        title = request.form['title']
        color_t = request.form['color_t']
        price = request.form['price']
        quantity = request.form['quantity']

        item = Item(title=title, color_t=color_t, price=price, quantity=quantity)

        try:
            db.session.add(item) # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—å–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
            db.session.commit() # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            return redirect('/posts') # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        except Exception as e:
            db.session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return f"O—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}"
    else:
        return render_template('create.html', products=products, colors_id=colors_id)

if __name__=='__main__':
    with app.app_context():
        db.create_all()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    app.run(debug=True)
